package player;

import java.util.ArrayList;
import java.util.Scanner;
import ship.Ship;
import world.World;

/**
 * Probabilistic guess player (task C).
 * Please implement this class.
 *
 * @author Youhan Xia, Jeffrey Chan
 */

public class ProbabilisticGuessPlayer  implements Player{
	private enum Mode {
	    HUNT, TARGET
	}

	private World world;
	private ArrayList<Guess> old_Guesses = new ArrayList<Guess>();
	private ArrayList<Ship> enemy_Ships = new ArrayList<Ship>();
	private int[][] shipConfigs;
	private Mode mode = Mode.HUNT;
	//ArrayList to find the next consecutive guesses
	private ArrayList<Guess> nextGuess = new ArrayList<Guess>();
	
	//Array List for already made guesses
    private ArrayList<Guess> madeGuesses = new ArrayList<Guess>();
    private ArrayList<Ship> enemyShips = new ArrayList<Ship>();
    @Override
    public void initialisePlayer(World world) {
       this.world=world;
       shipConfigs = new int[world.numRow][world.numColumn];

 
       for(World.ShipLocation sl : world.shipLocations)
       {
           enemyShips.add(sl.ship);
       }

       // Calculate initial number of ship configs
       calcShipConfigs();
       
    } // end of initialisePlayer()

    @Override
    public Answer getAnswer(Guess guess) {
        // To be implemented.

        // dummy return
        return null;
    } // end of getAnswer()


    @Override
    public Guess makeGuess() {
        // To be implemented.

        // dummy return
        return null;
    } // end of makeGuess()


    @Override
    public void update(Guess guess, Answer answer) {
        // To be implemented.
    } // end of update()


    @Override
    public boolean noRemainingShips() {
        // To be implemented.

        // dummy return
        return true;
    } // end of noRemainingShips()

} // end of class ProbabilisticGuessPlayer
